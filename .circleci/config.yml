version: 2.1

executors:
  executor:
    docker:
      - image: circleci/golang:1.16
        environment:
          GO111MODULE: "on"
          LINTER_VERSION: "v1.39.0"
          AWS_DEFAULT_REGION: "eu-west-1"
          AWS: "docker run --rm -i -e AWS_DEFAULT_REGION -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY home24/aws:latest"

commands:
  configure:
    steps:
      - run:
          name: Set common environment variables
          command: |
            echo 'export DOCKER_TAG=$(echo ${CIRCLE_BRANCH:-$CIRCLE_TAG} | tr "/" "-")' >> $BASH_ENV
      - run:
          name: Login to DockerHub
          command: echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin

  configure-staging:
    steps:
      - run:
          name: Set Staging environment variables
          command: |
            echo "export ECR_DOCKER_IMAGE='<ECR_REPOSITORY_STAGING_PLACEHOLDER>:${CIRCLE_SHA1:0:7}'" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID='$AWS_ACCESS_KEY_ID_STAGING'" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY='$AWS_SECRET_ACCESS_KEY_STAGING'" >> $BASH_ENV

            echo "export SERVICE_NAME='<SERVICE_NAME_STAGING_PLACEHOLDER>'" >> $BASH_ENV
            echo "export ROLLBACK_CONFIG='infrastructure/staging/service-rollback-config.yml'" >> $BASH_ENV

  configure-production:
    steps:
      - run:
          name: Set Production environment variables
          command: |
            echo "export ECR_DOCKER_IMAGE='<ECR_REPOSITORY_PRODUCTION_PLACEHOLDER>:${CIRCLE_TAG}'" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID='$AWS_ACCESS_KEY_ID_PRODUCTION'" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY='$AWS_SECRET_ACCESS_KEY_PRODUCTION'" >> $BASH_ENV

            echo "export SERVICE_NAME='<SERVICE_NAME_PRODUCTION_PLACEHOLDER>'" >> $BASH_ENV
            echo "export ROLLBACK_CONFIG='infrastructure/production/service-rollback-config.yml'" >> $BASH_ENV

  deploy:
    steps:
      - run:
          # So that we can mount checked out project into other docker containers
          name: Save workspace to docker container
          command: docker create -v /root --name workspace alpine:3.4 /bin/true && docker cp ~/project workspace:/root

      - run:
          name: Push to ECR
          command: |
           # You may delete this if statement in repository created from this template
           if [[ "${CIRCLE_PROJECT_REPONAME}" == *-Template ]]
             then
               echo "Skipping push to ECR, because this is template repository"
               exit 0
            fi
            make push-ecr
      - run:
          name: Deploy stack
          command: |
            # You may delete this if statement in repository created from this template
            if [[ "${CIRCLE_PROJECT_REPONAME}" == *-Template ]]
            then
                echo "Skipping deployment, because this is template repository"
                exit 0
            fi
            docker run -i --rm \
              --volumes-from workspace \
              --workdir /root/project \
              -e AWS_DEFAULT_REGION -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY \
              home24/infrastructure-artisan:v1.7.0 deploy "${SERVICE_NAME}" \
                --parameter-overrides=Release="build-${CIRCLE_BUILD_NUM}" \
                --parameter-overrides=DockerImage="${ECR_DOCKER_IMAGE}" \
                --rollback-config-file="${ROLLBACK_CONFIG}" \
                --no-interaction=true \
                --execute-changeset=true \
                --create-changeset-for-rollback=true \
                --wait-execution=true

  build:
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - configure
      - checkout
      - run:
          name: Install golangci-lint
          command: |
            curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b ~/bin ${LINTER_VERSION}
            echo 'export PATH=~/bin:$PATH' >> $BASH_ENV
      - run:
          name: Lint
          command: make lint
      - run:
          name: Test
          command: make test
      - run:
          name: Build
          command: make build
      - run:
          name: Push to DockerHub
          command: make push-dockerhub

jobs:
  build:
    executor: executor
    steps:
      - build

  build_deploy_staging:
    executor: executor
    steps:
      - build
      - configure-staging
      - deploy
      - run:
          name: Register deployment on NewRelic
          command: |
            curl -X POST "https://api.eu.newrelic.com/v2/applications/$NEW_RELIC_APP_ID_STAGING/deployments.json" \
              -H "X-Api-Key:$NEW_RELIC_API_KEY" -i -H 'Content-Type: application/json' \
              -d "{ \"deployment\": { \"revision\": \"$CIRCLE_BUILD_NUM\", \"changelog\": \"$CIRCLE_BRANCH:$CIRCLE_TAG\", \"description\": \"$CIRCLE_BUILD_URL\", \"user\":\"${CIRCLE_USERNAME}\" } }"

  build_deploy_production:
    executor: executor
    steps:
      - build
      - configure-production
      - deploy
      - run:
          name: Register deployment on NewRelic
          command: |
            curl -X POST "https://api.eu.newrelic.com/v2/applications/$NEW_RELIC_APP_ID_PRODUCTION/deployments.json" \
              -H "X-Api-Key:$NEW_RELIC_API_KEY" -i -H 'Content-Type: application/json' \
              -d "{ \"deployment\": { \"revision\": \"$CIRCLE_BUILD_NUM\", \"changelog\": \"$CIRCLE_BRANCH:$CIRCLE_TAG\", \"description\": \"$CIRCLE_BUILD_URL\", \"user\":\"${CIRCLE_USERNAME}\" } }"

workflows:
  version: 2
  build:
      jobs:
        - build:
            filters:
              branches: { ignore: master }
        - build_deploy_staging:
            filters:
              branches: { only: master }
              tags: { ignore: '/.*/' }
        - build_deploy_production:
            filters:
              branches: { ignore: '/.*/' }
              tags: { only: '/v[0-9]+(\.[0-9]+){2}/' }
